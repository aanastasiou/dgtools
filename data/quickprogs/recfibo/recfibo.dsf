# Recursive Fibonacci

.EQU status_reg=252 # The status register on the Digirule2
.EQU zero_bit=0  
.EQU carry_bit=1

# Initialise the stack head
COPYLR stack stack_ptr

COPYLR 4 R0
COPYLR R0 f_from
CALL f_push
CALL f_fibonacci
COPYAR R0
HALT


# Self-explanatory
f_fibonacci:
COPYLR R0 f_to
CALL f_pop
COPYLA 2
SUBRA R0
BCRSS carry_bit status_reg
JUMP f_fibonacci_ret_num
COPYRA R0
SUBLA 1
COPYAR R0
COPYLR R0 f_from
CALL f_push
CALL f_fibonacci
COPYAR T1
COPYRA R0
SUBLA 1
COPYAR R0
COPYLR R0 f_from
CALL f_fibonacci
ADDRA T1
RETURN


f_fibonacci_ret_num:
COPYRA R0
RETURN

COPYRA R0
CALL f_pop
ADDRA R0
RETURN

# Pushes the value of whatever f_from points to, to 
# the top of the stack.
f_push:
COPYRR stack_ptr f_to
CALL f_copy_ind
INCR stack_ptr
RETURN

# Pops the value of the top of the stack to whatever f_to 
# points to.
# NOTE HERE: We re-use the value of the Accumulator which 
# we may be already using in another part of the program.
f_pop:
COPYAR T0 # Save the Accumulator
COPYRA stack_ptr
SUBLA stack
BCRSS zero_bit status_reg # NOTE THIS CHECK. It prevents >>UNDERFLOW<<
DECR stack_ptr
COPYRA T0 # Restore the Accumulator
COPYRR stack_ptr f_from
CALL f_copy_ind
RETURN

# Memory copy by indirect addressing via self-modification.
# We construct a suitable absolute
# addressing copy instruction (COPYRR) and
# execute it as a sub-routine over f_from, f_to
f_copy_ind:
.DB 7
f_from:
.DB 0
f_to:
.DB 0
RETURN

R0:
.DB 0xF0
T0:
.DB 0xFF
T1:
.DB 0xFF
stack_ptr:
.DB 0
stack:
.DB 0xF0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0x0F
