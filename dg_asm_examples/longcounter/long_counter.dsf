# One huge ripple counter

# The main idea behind this program was to write the 
# smallest program possible, using the most memory 
# possible.

# The program is making use of some self-modifying code 
# to produce an INCR indirect: An INCR instruction that 
# increases the value of a specific memory location.

# The counter is initialised at a very special occasion:
# It is about to reset itself from its maximum count back 
# down to 0. This creates a rippling effect as the reset 
# ripple travels from the Least Significant Byte (LSB) to 
# the Most Significant Byte (MSB).
 
# This counter is 233 bytes long and the highest number it 
# can represent is:

# 13179894006841322479854620122170084926912013522466037943
# 43706666106002621345561402409288057184803891421955702295
# 37632116730115317754316483048406036918009001764045349509
# 06937942664422915800236844171640278724942888243990142286
# 01614308240494248737033497020218523643351874839672280540
# 71617415464737987072935096400220358078369415051687589577
# 07318893133586444139557373748585033528908823852943154899
# 46453488394423398674401553548965414666791756989103381598
# 43390356075193849158904064883576072848642143122338502025
# 09552412952006441842894260164101947268276461637650779996
# 16

.EQU status_register=252        # Status register
.EQU zero_bit=0                 # Zero bit of the status reg 

count_again:
COPYLR counter incr_addr        # Sets the target of INCR to incr (the LSB)
CALL incr_ind                   # Increases the LSB

count_higher:
BCRSS zero_bit status_register
JUMP count_again                # As soon as the LSB resets, increase 
INCR incr_addr                  # its most immediate MSB...
CALL incr_ind                   # ...and keep rippling up the orders
JUMP count_higher               # of magnitude

# Indirect INCR
# Set incr_addr then call incr_ind
incr_ind:
.DB 19
incr_addr:
.DB 0
RETURN

# Start of the counter state
counter:
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF, 0xFF
.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.DB 0xFF, 0xFF, 0xFF
