# Array indexing
# Setup an array and retrieve a number from it

# "Arrays" are consecutive memory addresses,
# with a base address (where they start) and 
# a "stride" that depends on each element's 
# data type.

# Here, we establish an array of 10 values (num_array)
# and retrieve the 5th element from it (using array_idx).
# The value is returned in array_idx_value

# In a higher level language, this could be written 
# as:
# unsigned char num_array[]={1,3,8,12,150,14,38,22,110,20};
# num_array[5]
# ...or even more accurately:
# unsigned char *p_num_array=&num_array
# *(p_num_array+5)

# Notice here that accessing a particular index is not only a
# matter of a memory transfer, but an addition too.

# Calculate the memory offset
COPYLA num_array
ADDRA array_idx
# Fetch the value from that memory offset to array_idx_value
COPYAR f_from
COPYLR array_idx_value f_to
CALL f_copy_ind
HALT


f_copy_ind:
# Memory copy by indirect addressing via self-modification.
# We construct a suitable absolute
# addressing copy instruction (COPYRR) and
# execute it as a sub-routine over f_from, f_to
.DB 7   # COPYRR opcode
f_from:
.DB 0
f_to:
.DB 0
RETURN

array_idx:
.DB 5
array_idx_value:
.DB 0
num_array:
.DB 1,3,8,12,150,14,38,22,110,20
