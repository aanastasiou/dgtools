# Simple stack & operations

# A stack is a data structure in which 
# all operations (Read & Write) take 
# place through its "head" pointer.

# In ASM, it looks like an array (e.g stack[n])
# but unlike an array, "n" IS NOT specified freely 
# but through two simple rules:

# 1 - Increase n AFTER Write
# 2 - Decrease n BEFORE Read

# Thus "n" always points to the next available 
# value, at the TOP of the stack. 
# Because of this, the Read and Write ops are more 
# descriptively known as PUSH and POP.

# Stacks are also known as First-In-First-Out 
# or FIFO lists.

# In this demo, we demonstrate this "FIFO" logic, by 
# swapping the contents of two variables by:
# PUSH R0
# PUSH R1  
# POP R0  
# POP R1   

.EQU status_reg=252 # The status register on the Digirule2
.EQU zero_bit=0  

# Initialise the stack head
COPYLR stack stack_ptr

# To push, point f_from to the variable to push to the 
# head of the stack and call f_push
# PUSH R0
COPYLR R0 f_from
CALL f_push

# PUSH R1
COPYLR R1 f_from
CALL f_push

# To pop, point f_to to the variable to pop the head of
# stack to and call f_pop.
# POP R0 
# Which now receives the value of R1. >>FIFO<<
COPYLR R0 f_to
CALL f_pop

# POP R1 
# Which now receives the value of R0.
COPYLR R1 f_to
CALL f_pop
HALT

# Pushes the value of whatever f_from points to, to 
# the top of the stack.
f_push:
COPYRR stack_ptr f_to
CALL f_copy_ind
INCR stack_ptr
RETURN

# Pops the value of the top of the stack to whatever f_to 
# points to.
f_pop:
COPYRA stack_ptr
SUBLA stack
BCRSS zero_bit status_reg # NOTE THIS CHECK. It prevents >>UNDERFLOW<<
DECR stack_ptr
COPYRR stack_ptr f_from
CALL f_copy_ind
RETURN

# Memory copy by indirect addressing via self-modification.
# We construct a suitable absolute
# addressing copy instruction (COPYRR) and
# execute it as a sub-routine over f_from, f_to
f_copy_ind:
.DB 7
f_from:
.DB 0
f_to:
.DB 0
RETURN

R0:
.DB 0xF0
R1:
.DB 0x0F
stack:
.DB 0xF0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0x0F
stack_ptr:
.DB 0
